name: Run tests

on:
  push:
    branches:
      - "master"
      - "release-**"
  pull_request:
    types: [opened, synchronize, reopened]
  merge_group:
  workflow_dispatch:
    inputs:
      run_e2e_tests:
        description: "Force run e2e tests (ignores file change detection)"
        type: boolean
        default: true
      e2e_only:
        description: "Only run e2e tests (skip backend, frontend, driver tests)"
        type: boolean
        default: true
      reuse_artifacts:
        description: "Reuse latest existing artifacts instead of building (for testing workflows)"
        type: boolean
        default: false
      debug_specs:
        description: "Use minimal specs for debugging (much faster)"
        type: boolean
        default: false

jobs:
  files-changed:
    if: ${{ !contains(github.event.pull_request.labels.*.name,'ci skip') }}
    name: Check which files changed
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      e2e_all: ${{ steps.changes.outputs.e2e_all }}
      e2e_all_files: ${{ steps.changes.outputs.e2e_all_files }}
      e2e_specs: ${{ steps.changes.outputs.e2e_specs }}
      e2e_specs_files: ${{ steps.changes.outputs.e2e_specs_files }}
      backend_all: ${{ steps.changes.outputs.backend_all }}
      frontend_all: ${{ steps.changes.outputs.frontend_all }}
      frontend_sources: ${{ steps.changes.outputs.frontend_sources }}
      documentation: ${{ steps.changes.outputs.documentation }}
    steps:
      - uses: actions/checkout@v4
      - name: Test which files changed
        uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          token: ${{ github.token }}
          # comma separated list of files
          list-files: csv
          filters: .github/file-paths.yaml

  static-viz-files-changed:
    name: Check whether static-viz files changed
    if: ${{ !contains(github.event.pull_request.labels.*.name,'ci skip') }}
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      static_viz: ${{ steps.static_viz.outputs.static_viz }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: "files-changed"
      - name: Build static-viz frontend
        run: yarn build-static-viz
        env:
          MB_EDITION: ee
      - name: Upload Static Viz Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-viz-bundle-${{ github.sha }}
          path: resources/frontend_client/app/dist

      - name: Check for static viz changes
        uses: dorny/paths-filter@v3.0.0
        id: static_viz
        with:
          token: ${{ github.token }}
          filters: .github/static-viz-sources.yaml

  uberjar:
    needs: [files-changed, static-viz-files-changed]
    if: ${{ !cancelled() && !inputs.reuse_artifacts && !(needs.files-changed.outputs.documentation == 'true' && needs.files-changed.outputs.backend_all == 'false' && needs.files-changed.outputs.frontend_all == 'false' && needs.files-changed.outputs.e2e_all == 'false') }}
    uses: ./.github/workflows/uberjar.yml
    secrets: inherit

  download-artifacts:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    if: ${{ inputs.reuse_artifacts }}
    steps:
      - name: Find and download latest artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Finding latest OSS and EE artifacts..."
          
          # Debug: List all available artifacts to see what's available
          echo "All available uberjar artifacts:"
          gh api repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.expired == false and (.name | contains("uberjar"))) | "\(.name) - created: \(.created_at)"' | head -10
          
          # Find the latest OSS artifact (improved search)
          OSS_ARTIFACT=$(gh api repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.expired == false and (.name | contains("metabase-oss") and endswith("-uberjar"))) | .name' \
            | head -1)
          
          # If no OSS artifact, try to find any uberjar that might work for OSS
          if [ -z "$OSS_ARTIFACT" ]; then
            echo "No OSS artifact found, looking for any uberjar artifact..."
            OSS_ARTIFACT=$(gh api repos/${{ github.repository }}/actions/artifacts \
              --jq '.artifacts[] | select(.name | endswith("-uberjar")) | select(.expired == false) | .name' \
              | head -1)
            echo "Using artifact for both OSS and EE: $OSS_ARTIFACT"
          fi
          
          # Find the latest EE artifact  
          EE_ARTIFACT=$(gh api repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.expired == false and (.name | contains("metabase-ee") and endswith("-uberjar"))) | .name' \
            | head -1)
          
          # If no EE artifact but we have OSS, use the same artifact
          if [ -z "$EE_ARTIFACT" ] && [ -n "$OSS_ARTIFACT" ]; then
            echo "No separate EE artifact found, using OSS artifact for both"
            EE_ARTIFACT="$OSS_ARTIFACT"
          fi
          
          echo "Latest OSS artifact: $OSS_ARTIFACT"
          echo "Latest EE artifact: $EE_ARTIFACT"
          
          if [ -z "$OSS_ARTIFACT" ] || [ -z "$EE_ARTIFACT" ]; then
            echo "Error: Could not find recent artifacts"
            echo "Available artifacts:"
            gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.expired == false) | "\(.name) - expires: \(.expires_at)"'
            exit 1
          fi
          
          echo "Downloading OSS artifact: $OSS_ARTIFACT"
          gh api repos/${{ github.repository }}/actions/artifacts \
            --jq ".artifacts[] | select(.name==\"$OSS_ARTIFACT\") | .archive_download_url" \
            | head -1 \
            | xargs -I {} curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" {} -o oss-artifact.zip
          
          echo "Downloading EE artifact: $EE_ARTIFACT"
          gh api repos/${{ github.repository }}/actions/artifacts \
            --jq ".artifacts[] | select(.name==\"$EE_ARTIFACT\") | .archive_download_url" \
            | head -1 \
            | xargs -I {} curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" {} -o ee-artifact.zip
            
          echo "Extracting artifacts..."
          mkdir -p oss-extract ee-extract
          
          echo "Extracting OSS artifact..."
          unzip -q oss-artifact.zip -d oss-extract/
          
          echo "Extracting EE artifact..."
          unzip -q ee-artifact.zip -d ee-extract/
          
          echo "Preparing artifacts with correct directory structure..."
          # Keep the full directory structure that the e2e runner expects
          
          echo "Found files in OSS extract:"
          ls -la oss-extract/target/uberjar/
          echo "Found files in EE extract:"
          ls -la ee-extract/target/uberjar/
          
      - name: Re-upload OSS as expected name
        uses: actions/upload-artifact@v4
        with:
          name: metabase-oss-${{ github.sha }}-uberjar
          path: oss-extract/
          
      - name: Re-upload EE as expected name
        uses: actions/upload-artifact@v4  
        with:
          name: metabase-ee-${{ github.sha }}-uberjar
          path: ee-extract/

  backend-tests:
    if: ${{ !cancelled() && !inputs.e2e_only }}
    needs: [files-changed, static-viz-files-changed]
    uses: ./.github/workflows/backend.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.backend_all != 'true' && needs.static-viz-files-changed.outputs.static_viz != 'true' }}

  semantic-search-tests:
    needs: files-changed
    uses: ./.github/workflows/semantic-search.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.backend_all != 'true' }}

  app-db-tests:
    if: ${{ !inputs.e2e_only }}
    needs: files-changed
    uses: ./.github/workflows/app-db.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.backend_all != 'true' }}

  driver-tests:
    if: ${{ !inputs.e2e_only }}
    needs: files-changed
    uses: ./.github/workflows/drivers.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.backend_all != 'true' }}

  frontend-tests:
    if: ${{ !inputs.e2e_only }}
    needs: files-changed
    uses: ./.github/workflows/frontend.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.frontend_all != 'true' }}
      skip-lint: ${{ needs.files-changed.outputs.frontend_all != 'true' && needs.files-changed.outputs.e2e_specs != 'true' }}

  e2e-tests:
    needs: [files-changed, uberjar, download-artifacts]
    if: always() && !cancelled() && (needs.uberjar.result == 'success' || needs.download-artifacts.result == 'success' || needs.uberjar.result == 'skipped')
    uses: ./.github/workflows/e2e-tests.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.e2e_all != 'true' && !inputs.run_e2e_tests }}
      # Always use empty specs to trigger auto-split branch, handle debug specs via environment
      specs: ${{ needs.files-changed.outputs.e2e_all_files == needs.files-changed.outputs.e2e_specs_files && needs.files-changed.outputs.e2e_specs_files || '' }}
      debug_specs: ${{ inputs.debug_specs }}

  sdk-tests:
    needs: files-changed
    uses: ./.github/workflows/embedding-sdk.yml
    secrets: inherit

  pr-env:
    needs: [uberjar]
    if: |
      !cancelled() &&
      contains(github.event.pull_request.labels.*.name, 'PR-Env')
    uses: ./.github/workflows/pr-env.yml
    secrets: inherit

  containerize:
    needs: [uberjar]
    if: |
      !cancelled() &&
      needs.uberjar.result == 'success' &&
      (
        (github.event_name == 'push' && contains(fromJson('["master", "metabot-v3-main", "internal-tools"]'), github.ref_name)) ||
        (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'build-docker-uberjar'))
      )
    uses: ./.github/workflows/containerize-uberjar.yml
    secrets: inherit

name: E2E Test
run-name: E2E Test - ${{ inputs.name }}

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      edition: # oss | ee
        required: false
        type: string
        default: ee
      specs:
        required: false
        default: ./e2e/test/scenarios/**/*.cy.spec.*
        type: string
      tags:
        required: false
        type: string
      runner:
        required: false
        type: string
        default: ubuntu-22.04
      total_chunks: # number of chunks
        required: false
        type: number
      split_index: # index of the chunk
        required: false
        type: number

jobs:
  e2e-tests:
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 45
    name: e2e-tests-${{ inputs.name }}-${{ inputs.edition }}
    env:
      MB_EDITION: ${{ inputs.edition }}
      DISPLAY: ""
      QA_DB_ENABLED: true
      PR_NUMBER: ${{ github.event.pull_request.number || '' }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      HASH: ${{ github.event.pull_request.head.sha || github.sha }}-${{ github.run_attempt }}
      JOB_NAME: ${{ inputs.name }}
      # Any env starting with `CYPRESS_` will be available to all Cypress tests via `Cypress.env()`
      # Example: you can get `CYPRESS_FOO` with `Cypress.env("FOO")`
      CYPRESS_MB_ALL_FEATURES_TOKEN: ${{ secrets.MB_ALL_FEATURES_TOKEN }}
      CYPRESS_MB_STARTER_CLOUD_TOKEN: ${{ secrets.MB_STARTER_CLOUD_TOKEN }}
      CYPRESS_MB_PRO_CLOUD_TOKEN: ${{ secrets.MB_PRO_CLOUD_TOKEN }}
      CYPRESS_MB_PRO_SELF_HOSTED_TOKEN: ${{ secrets.MB_PRO_SELF_HOSTED_TOKEN }}
      CYPRESS_PULL_REQUEST_ID: ${{ github.event.pull_request.number || '' }}
      COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title || github.event.head_commit.message || github.event.head.sha }}
      MB_EXPERIMENTAL_SEARCH_BLOCK_ON_QUEUE: true
      MB_SEARCH_ENGINE: appdb
      MB_SNOWPLOW_AVAILABLE: true
      MB_SNOWPLOW_URL: "http://localhost:9090" # Snowplow micro
      TZ: US/Pacific # to make node match the instance tz
      CYPRESS_CI: true
      CYPRESS_QA_DB_MONGO: ${{ inputs.name == 'mongo' }}
      CYPRESS_IS_EMBEDDING_SDK: "${{ inputs.name == 'embedding-sdk' }}"
    steps:
      - uses: actions/checkout@v4

      - name: Prepare Docker containers
        uses: ./.github/actions/e2e-prepare-containers
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          maildev: true
          openldap: true
          webhook: true
          snowplow: true
          postgres: ${{ inputs.name != 'mongo' }}
          mysql: ${{ inputs.name != 'mongo' }}
          mongo: ${{ inputs.name == 'mongo' }}

      - name: Run Embedding SDK Storybook
        if: inputs.name == 'embedding-sdk'
        uses: ./.github/actions/run-embedding-sdk-storybook

      - name: Retrieve uberjar artifact for ${{ inputs.edition }}
        uses: ./.github/actions/fetch-artifact
        with:
          name: metabase-${{ inputs.edition }}-${{ github.event.pull_request.head.sha || github.sha }}-uberjar
          extract-path: "target/uberjar"
          output-name: "metabase.jar"

      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend

      - name: Prepare JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: "temurin"

      - name: Prepare Cypress environment
        id: cypress-prep
        uses: ./.github/actions/prepare-cypress

      - name: Download failed test artifacts
        uses: actions/download-artifact@v4
        if: github.run_attempt != '1'
        continue-on-error: true
        id: failed-specs
        with:
          name: failed-tests-${{ inputs.name }}-${{ inputs.edition }}

      - name: Get failed specs
        if: github.run_attempt != '1'
        run: echo "specs=$(cat failed-specs)" >> $GITHUB_ENV

      - name: Run Metabase
        run: node e2e/runner/run_cypress_ci.js start

      - name: Generate database snapshots
        run: node e2e/runner/run_cypress_ci.js snapshot

      - name: Run auto-split Cypress tests on ${{ inputs.name }}
        env:
          SPLIT: ${{ inputs.total_chunks }}
          SPLIT_INDEX: ${{ inputs.split_index }}
          SPLIT_FILE: "./e2e/support/timings.json"
          SPLIT_OUTPUT_FILE: "newTimings.json"
          SPLIT_TIME_THRESHOLD: 0.01
          # do not write cypress-split summary to github
          SPLIT_SUMMARY: false
          SPEC_PATH: ${{ env.specs || inputs.specs }}
        shell: bash
        run: |
          # Create empty newTimings.json file in current directory if it doesn't exist
          if [ ! -f "newTimings.json" ]; then
            echo '{"durations": []}' > newTimings.json
          fi
          echo "Running tests with specs: $SPEC_PATH"
          echo "=== BEFORE TEST EXECUTION ==="
          echo "Cypress split environment variables:"
          echo "  SPLIT: $SPLIT"
          echo "  SPLIT_INDEX: $SPLIT_INDEX" 
          echo "  SPLIT_FILE: $SPLIT_FILE"
          echo "  SPLIT_OUTPUT_FILE: $SPLIT_OUTPUT_FILE"
          echo "  SPLIT_TIME_THRESHOLD: $SPLIT_TIME_THRESHOLD"
          echo "  CYPRESS_CI: $CYPRESS_CI"
          echo "Current directory: $(pwd)"
          echo "Files before test:"
          ls -la . | grep -i timing || echo "No timing files found before test"
          ls -la newTimes.json 2>/dev/null || echo "newTimes.json does not exist before test"
          echo "================================"

          # Capture both stdout and stderr, and save cypress logs
          node e2e/runner/run_cypress_ci.js e2e \
            --env grepTags="-@mongo+-@flaky+-@OSS+-@skip",grepOmitFiltered=true \
            --spec "$SPEC_PATH" \
            --browser ${{ steps.cypress-prep.outputs.chrome-path }} 2>&1 | tee cypress-output.log

          echo "=== CYPRESS OUTPUT ANALYSIS ==="
          echo "Looking for cypress-split messages in the output:"
          grep -i "cypress-split\|timing\|newTimes" cypress-output.log || echo "No cypress-split timing messages found"
          echo "Last 20 lines of cypress output:"
          tail -20 cypress-output.log

          CYPRESS_EXIT_CODE=$?
          echo "=== AFTER TEST EXECUTION ==="
          echo "Exit code from cypress run: $CYPRESS_EXIT_CODE"
          echo "Current directory: $(pwd)"
          echo "Environment variables that might affect cypress-split:"
          echo "  SPLIT_OUTPUT_FILE: $SPLIT_OUTPUT_FILE"
          echo "  SPLIT_TIME_THRESHOLD: $SPLIT_TIME_THRESHOLD"
          echo "All files in current directory (including hidden):"
          ls -la
          echo "Looking for any timing-related files recursively:"
          find . -maxdepth 2 -name "*timing*" 2>/dev/null
          echo "Checking if cypress-split updated the timing file:"
          ls -la ./e2e/support/timings.json 2>/dev/null || echo "e2e/support/timings.json does not exist"
          echo "Content of timing file if it exists:"
          head -20 ./e2e/support/timings.json 2>/dev/null || echo "Could not read timing file"
          echo "Checking if there are any cypress temp or output directories:"
          ls -la cypress/ 2>/dev/null || echo "No cypress directory found"
          echo "==============================="

      - name: Run Tagged EE Cypress tests on ${{ inputs.name }}
        if: ${{ inputs.specs }}
        shell: bash
        env:
          SPLIT: ${{ inputs.total_chunks || 1 }}
          SPLIT_INDEX: ${{ inputs.split_index || 0 }}
          SPLIT_FILE: "./e2e/support/timings.json"
          SPLIT_OUTPUT_FILE: "newTimings.json"
          SPLIT_TIME_THRESHOLD: 0.01
          SPEC_PATH: ${{ env.specs || inputs.specs }}
        run: |
          echo "Running tests with specs: $SPEC_PATH"
          echo "=== BEFORE TAGGED TEST EXECUTION ==="
          echo "Cypress split environment variables:"
          echo "  SPLIT_FILE: $SPLIT_FILE"
          echo "  SPLIT_OUTPUT_FILE: $SPLIT_OUTPUT_FILE"
          echo "  SPLIT_TIME_THRESHOLD: $SPLIT_TIME_THRESHOLD"
          echo "  CYPRESS_CI: $CYPRESS_CI"
          echo "Current directory: $(pwd)"
          echo "Files before test:"
          ls -la . | grep -i timing || echo "No timing files found before test"
          ls -la newTimes.json 2>/dev/null || echo "newTimes.json does not exist before test"
          echo "====================================="

          node e2e/runner/run_cypress_ci.js e2e \
          --env grepTags="${{inputs.tags}}+-@skip",grepOmitFiltered=true \
          --spec "$SPEC_PATH" \
          --browser ${{ steps.cypress-prep.outputs.chrome-path }}

          echo "=== AFTER TAGGED TEST EXECUTION ==="
          echo "Exit code from cypress run: $?"
          echo "Current directory: $(pwd)"
          echo "All files in current directory:"
          ls -la
          echo "Looking for any timing-related files:"
          find . -maxdepth 2 -name "*timing*" 2>/dev/null
          echo "Checking if cypress-split updated the timing file:"
          ls -la ./e2e/support/timings.json 2>/dev/null || echo "e2e/support/timings.json does not exist after test"
          echo "Content of timing file if it exists:"
          head -20 ./e2e/support/timings.json 2>/dev/null || echo "Could not read timing file"
          echo "==================================="

      - name: Extract chunk-specific timings
        if: inputs.split_index != null
        continue-on-error: true
        shell: bash
        run: |
          echo "=== EXTRACTING CHUNK-SPECIFIC TIMINGS ==="
          
          # Extract the JSON timing data that cypress-split outputs for this chunk
          echo "Looking for cypress-split timing output in logs..."
          
          if ! grep -q "cypress-split: here are passing spec timings" cypress-output.log; then
            echo "⚠️  WARNING: cypress-split timing output not found in logs"
            echo "This may indicate no tests ran or cypress-split didn't execute"
            echo "Creating empty timing file..."
            echo '{"durations": []}' > chunkTimings.json
            exit 0
          fi
          
          echo "✅ Found cypress-split timing output"
          
          # Extract the JSON block that follows "cypress-split: here are passing spec timings"
          CHUNK_TIMING_JSON=$(sed -n '/cypress-split: here are passing spec timings/,/^}/p' cypress-output.log | tail -n +2)
          
          if [ -z "$CHUNK_TIMING_JSON" ]; then
            echo "⚠️  WARNING: Could not extract timing JSON from cypress-split output"
            echo "Expected JSON block after 'cypress-split: here are passing spec timings' message"
            echo "Creating empty timing file..."
            echo '{"durations": []}' > chunkTimings.json
            exit 0
          fi
          
          echo "✅ Successfully extracted chunk timing data"
          echo "$CHUNK_TIMING_JSON" > chunkTimings.json
          
          # Validate the JSON is well-formed
          if ! jq empty chunkTimings.json 2>/dev/null; then
            echo "⚠️  WARNING: Extracted timing data is not valid JSON"
            echo "Content:"
            cat chunkTimings.json
            echo "Creating empty timing file instead..."
            echo '{"durations": []}' > chunkTimings.json
          fi
          
          echo "✅ Chunk timing data is valid JSON"
          echo "Chunk timing data for this run:"
          cat chunkTimings.json
          
          SPEC_COUNT=$(jq '.durations | length' chunkTimings.json)
          echo "✅ Extracted timing data for $SPEC_COUNT specs in this chunk"
          echo "============================="

      - name: Upload Test Results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit
          output-name: e2e-${{ inputs.name }}
          variant: e2e-tests
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

      - name: Upload Cypress Artifacts upon failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-recording-${{ inputs.name }}-${{ inputs.edition }}
          path: |
            ./cypress
            ./logs/test.log
          if-no-files-found: ignore

      - name: Upload Failed Tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: failed-tests-${{ inputs.name }}-${{ inputs.edition }}
          path: ./cypress/test-results

      - name: Check for timing file
        if: always()
        run: |
          echo "Looking for updated timing file..."
          echo "Current directory: $(pwd)"
          echo "All files in e2e/support directory:"
          ls -la ./e2e/support/ || echo "e2e/support directory not found"
          echo "Specifically looking for newTimings.json:"
          ls -la ./e2e/support/newTimings.json || echo "e2e/support/newTimings.json not found"
          echo "Content of new timing file:"
          head -20 ./e2e/support/newTimings.json 2>/dev/null || echo "Could not read new timing file"
          echo "Also checking original timing file:"
          ls -la ./e2e/support/timings.json || echo "e2e/support/timings.json not found"
          echo "Finding all timing-related files:"
          find . -name "*timing*" -o -name "*Timing*" 2>/dev/null || echo "No timing files found"

      - name: Check timing file before upload
        if: always() && inputs.split_index != null
        continue-on-error: true
        shell: bash
        run: |
          echo "=== TIMING FILE UPLOAD CHECK ==="
          echo "Checking if chunk timing file exists at chunkTimings.json:"
          if [ -f "chunkTimings.json" ]; then
            echo "✅ Chunk timing file exists"
            echo "File size: $(stat -c%s chunkTimings.json 2>/dev/null || stat -f%z chunkTimings.json) bytes"
            echo "Chunk-specific timing file contents:"
            cat chunkTimings.json
            echo ""
            echo "File info:"
            ls -la chunkTimings.json
          else
            echo "❌ Chunk timing file does not exist"
            echo "Contents of current directory:"
            ls -la *timing*.json 2>/dev/null || echo "No timing files found"
          fi
          
          echo "Also checking full timing file at newTimings.json for comparison:"
          if [ -f "newTimings.json" ]; then
            echo "✅ Full timing file exists"
            echo "Full timing file size: $(stat -c%s newTimings.json 2>/dev/null || stat -f%z newTimings.json) bytes"
            echo "Number of specs in full file: $(jq '.durations | length' newTimings.json 2>/dev/null || echo 'unknown')"
          else
            echo "❌ Full timing file does not exist"
          fi
          echo "============================="

      - name: Upload Timing Data
        uses: actions/upload-artifact@v4
        if: always() && inputs.split_index != null
        continue-on-error: true
        with:
          name: timing-data-${{ inputs.name }}-${{ inputs.split_index }}
          path: chunkTimings.json
          retention-days: 7

      - name: Publish Summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: | #js
            const {
               generateReport,
               parseReport,
               formatSummary
             } = require("./.github/scripts/handle-mochawesome-report.js");

             const report = await generateReport();
             const results = parseReport(report);
             const summary = formatSummary(results);

             await core.summary.addRaw(summary).write();
